// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.DataProvider;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(GameDataProvider))]
    partial class SqlDataProviderModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.9");

            modelBuilder.Entity("backend.Model.Account.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Theme")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("backend.Model.Account.FavouriteGame", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("AccountId", "GameId");

                    b.HasIndex("AccountId1");

                    b.ToTable("FavouriteGames");
                });

            modelBuilder.Entity("backend.Model.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Company")
                        .HasColumnType("TEXT")
                        .HasColumnName("company");

                    b.Property<string>("Genre")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GenreId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("genre");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("gamename");

                    b.Property<float?>("Price")
                        .HasColumnType("REAL")
                        .HasColumnName("price");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("release_date");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("backend.Model.Account.FavouriteGame", b =>
                {
                    b.HasOne("backend.Model.Account.Account", null)
                        .WithMany("FavouriteGames")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Account.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("backend.Model.Account.Account", b =>
                {
                    b.Navigation("FavouriteGames");
                });
#pragma warning restore 612, 618
        }
    }
}
